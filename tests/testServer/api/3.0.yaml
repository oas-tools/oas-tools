openapi: 3.0.0
info:
  version: 0.1.0
  title: Test server
  description: Server for OAS-Tools Testing
paths:
  # OAS PARAMS TEST ENDPOINTS
  /api/v1/oasParams:
    x-router-controller: oasParamsTestController
    get:
      operationId: getRequest
      parameters:
        - $ref: 'subschemas/oasparams.yaml#/noexplode/queryparams/0'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/queryparams/1'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/queryparams/2'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/headerparams/0'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/cookieparams/0'
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/explode:
    x-router-controller: oasParamsTestController
    get:
      operationId: getRequest
      parameters:
        - $ref: 'subschemas/oasparams.yaml#/explode/queryparams/0'
        - $ref: 'subschemas/oasparams.yaml#/explode/queryparams/1'
        - $ref: 'subschemas/oasparams.yaml#/explode/queryparams/2'
        - $ref: 'subschemas/oasparams.yaml#/explode/queryparams/3'
        - $ref: 'subschemas/oasparams.yaml#/explode/headerparams/0'
        - $ref: 'subschemas/oasparams.yaml#/explode/cookieparams/0'
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/json:
    x-router-controller: oasParamsTestController
    get:
      operationId: getRequest
      parameters:
        - $ref: 'subschemas/oasparams.yaml#/json/queryparams/0'
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/{testparamsimple}/{testparamslabel}/{testparamsmatrix}:
    x-router-controller: oasParamsTestController
    get:
      operationId: getRequest
      parameters:
        - $ref: 'subschemas/oasparams.yaml#/noexplode/pathparams/0'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/pathparams/1'
        - $ref: 'subschemas/oasparams.yaml#/noexplode/pathparams/2'

      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/explode/{testparamsimple}/{testparamslabel}/{testparamsmatrix}:
    x-router-controller: oasParamsTestController
    get:
      operationId: getRequest
      parameters:
        - $ref: 'subschemas/oasparams.yaml#/explode/pathparams/0'
        - $ref: 'subschemas/oasparams.yaml#/explode/pathparams/1'
        - $ref: 'subschemas/oasparams.yaml#/explode/pathparams/2'
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/body/defaultFields:
    x-router-controller: oasParamsTestController
    post:
      operationId: postRequest
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: 'subschemas/oasparams.yaml#/body/schemaWithDefaults'}
      responses:
          '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasParams/body/requiredFields:
    x-router-controller: oasParamsTestController
    post:
      operationId: postRequest2
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: 'subschemas/oasparams.yaml#/body/schemaWithRequired' }
      responses:
        '200': { $ref: 'subschemas/responses.yaml#/200' }
  # OAS SECURITY TEST ENDPOINT
  /api/v1/oasSecurity:
    x-router-controller: oasSecurityTestController
    get:
      operationId: getRequest
      security: # basicAuth AND openID OR apiKey(all three)
        - basicAuth: []
          openID: [read, write]
        - apiKeyQuery: []
          apiKeyHeader: []
          apiKeyCookie: []
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}

  /api/v1/oasSecurity/bearer:
    x-router-controller: oasSecurityTestController
    get:
      operationId: getRequest
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}

  /api/v1/oasSecurity/invalid:
    x-router-controller: oasSecurityTestController
    get:
      operationId: getRequest
      security:
        - undeclaredScheme: []
      responses:
        '500': {$ref: 'subschemas/responses.yaml#/500'}

  # OAS REQUEST VALIDATOR TEST ENDPOINT
  /api/v1/oasRequestValidator:
    x-router-controller: oasRequestValidatorTestController
    post:
      operationId: postRequest
      parameters:
        - name: queryparamform
          required: true
          explode: false
          style: form
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - test
              properties:
                test:
                  type: string
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
        '400': {$ref: 'subschemas/responses.yaml#/400'}
  /api/v1/oasRequestValidator/missingBody:
    x-router-controller: oasRequestValidatorTestController
    post:
      operationId: postRequest
      responses:
        '400': {$ref: 'subschemas/responses.yaml#/400'}
  /api/v1/oasRequestValidator/body/readOnlyProp:
    x-router-controller: oasRequestValidatorTestController
    post:
      operationId: postRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'subschemas/schemas.yaml#/readWriteOnlyResponse'
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  # OAS ROUTER TEST ENDPOINT
  /api/v1/oasRouter:
    get:
      operationId: getRequest
      x-router-controller: oasRouterTestController
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasRouter/async:
    get:
      operationId: getRequestAsync
      x-router-controller: oasRouterTestController
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
  /api/v1/oasRouter/asyncthrow: 
    get:
      operationId: getRequestAsyncThrow
      x-router-controller: oasRouterTestController
      responses:
        '500': {$ref: 'subschemas/responses.yaml#/500'}
  /api/v1/oasRouter/defaultexport: 
    get:
      operationId: getRequest
      x-router-controller: oasRouterDefaultExportTestController
      responses:
        '500': {$ref: 'subschemas/responses.yaml#/500'}

  # OAS RESPONSE VALIDATOR TEST ENDPOINT
  /api/v1/oasResponseValidator:
    x-router-controller: oasResponseValidatorTestController
    get:
      operationId: getRequest
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}
    delete:
      operationId: deleteRequest
      responses:
        '204': {$ref: 'subschemas/responses.yaml#/204'}

  /api/v1/oasResponseValidator/unexpectedResponse:
    x-router-controller: oasResponseValidatorTestController
    get:
      operationId: getRequestUnexpected
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}

  /api/v1/oasResponseValidator/wrongData:
    x-router-controller: oasResponseValidatorTestController
    get:
      operationId: getRequestWrongData
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}

  /api/v1/oasResponseValidator/body/defaultFields:
    x-router-controller: oasResponseValidatorTestController
    get:
      operationId: getRequestDefaultBody
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  fixedProp:
                    type: number
                    default: 1
                additionalProperties:
                  type: string
                  default: 'Default value'

  /api/v1/oasResponseValidator/body/writeOnlyProp:
    x-router-controller: oasResponseValidatorTestController
    get:
      operationId: getRequestWriteOnlyProp
      responses:
        '200': {$ref: 'subschemas/responses.yaml#/200'}


 # OAS ERROR HANDLER TEST ENDPOINT
  /api/v1/oasErrorHandler/{error}:
    get:
      operationId: getRequest
      x-router-controller: oasErrorHandlerTestController
      parameters:
        - name: error
          required: true
          in: path
          schema:
            type: string
      responses:
        '400': {$ref: 'subschemas/responses.yaml#/400'}
        '401': {$ref: 'subschemas/responses.yaml#/401'}
        '403': {$ref: 'subschemas/responses.yaml#/403'}
        '406': {$ref: 'subschemas/responses.yaml#/406'}
        '500': {$ref: 'subschemas/responses.yaml#/500'}
        
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
    apiKeyHeader:
      name: apiKeyHeader
      type: apiKey
      in: header
    apiKeyCookie:
      name: apiKeyCookie
      type: apiKey
      in: cookie
    apiKeyQuery:
      name: apiKeyQuery
      type: apiKey
      in: query
    openID:
      type: openIdConnect
      openIdConnectUrl: https://test.com/openid/connect
